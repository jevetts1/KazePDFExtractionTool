import numpy as np
from PIL import Image
import os,pdfplumber,json,time,re
from matplotlib import pyplot as plt

def getPDFs(directory):
    pdfs = []

    for subdirs,dirs,files in os.walk(directory):
        for file in files:
            if file.endswith(".pdf"):
                filepath = subdirs + "\\" + file
                pdfs.append(filepath)

    return pdfs

def getkeywords():
    with open(".\\resources\\cveexamples.txt","r") as keywordsfile:
        cvekeywords = keywordsfile.read().splitlines()
        keywordsfile.close()

    with open(".\\resources\\threatactors.txt","r") as keywordsfile:
        threatactorkeywords = keywordsfile.read().splitlines()
        keywordsfile.close()

    with open(".\\resources\\malwareexamples.txt","r") as keywordsfile:
        malwarekeywords = keywordsfile.read().splitlines()
        keywordsfile.close()

    with open(".\\resources\\SHA256hashes.txt","r") as keywordsfile:
        SHAkeywords = keywordsfile.read().splitlines()
        keywordsfile.close()
    
    with open(".\\resources\\SHA1hashes.txt","r") as keywordsfile:
        SHAkeywords = keywordsfile.read().splitlines()
        keywordsfile.close()
    
    with open(".\\resources\\MD5hashes.txt","r") as keywordsfile:
        MD5keywords = keywordsfile.read().splitlines()
        keywordsfile.close()

    keyworddict = {keywords:"exploits" for keywords in cvekeywords}
    keyworddict.update({keywords:"threat_actors" for keywords in threatactorkeywords})
    keyworddict.update({keywords:"malware" for keywords in malwarekeywords})
    keyworddict.update({keywords:"SHA256" for keywords in SHAkeywords})
    keyworddict.update({keywords:"SHA1" for keywords in SHAkeywords})
    keyworddict.update({keywords:"MD5" for keywords in MD5keywords})
    
    foundkeys = {keyword:[] for keyword in list(keyworddict.keys())}

    return keyworddict,foundkeys

def cleanword(word):
    with open(".\\resources\\delimetersfile.txt","r") as d:
        delimeters = d.read()
        d.close()   
    
    for letter in word:
        if letter not in delimeters:
            word = word.replace(letter,"")

    return word

def cleanpage(page):
    with open(".\\resources\\delimetersfile.txt","r") as d:
        delimeters = d.read()
        d.close()   

    for i in range(len(page)):
        if page[i] not in delimeters:
            page = page.replace(page[i]," ")

    page = re.sub(" +"," ",page)

    return page

def checkCVE(string):
    if re.search("CVE-[0-9]{4}-[0-9]+",string):
        return True

    else:
        return False

def checkHash(string):
    if re.search(" [0-9a-f]{64} ",string):
        return True,"SHA256"

    elif re.search(" [0-9a-f]{32} ",string):
        return True,"MD5"
    
    elif re.search(" [0-9a-f]{40} ",string):
        return True,"SHA1"

    else:
        return False,None

def extractsentence(page,index):
    currentchar = page[index]
    prevchars = [page[index + 1],page[index + 2]]

    sentencecomplete = False

    while not sentencecomplete:
        if currentchar + prevchars[0] == ". " or currentchar + prevchars[0] == ".\n" or currentchar + prevchars[0] + prevchars[1] == "\n \n" or index == 0:
            sentencecomplete = True            
            
        else:
            index -= 1
            prevchars = [page[index + 1],page[index + 2]]
            currentchar = page[index]

    splitpage = page[index + 1:].replace("\n \n",". ").split(". ")
    sentence = splitpage[0]

    return sentence

def extractparagraph(page,index):
    currentchar = page[index]
    prevchars = [page[index + 1],page[index + 2]]

    while currentchar + prevchars[0] + prevchars[1] != "\n \n" and index >= 1:
        index -= 1
        currentchar = page[index]
        prevchars = [page[index + 1],page[index + 2]]

    splitpage = page[index + 1:].split("\n\n")
    paragraph = splitpage[0]

    return paragraph
        
def makeassociation(paragraph,keyworddict,keyword,associations):
    for word in paragraph.split(" "):
        if keyworddict.get(word) and word != keyword:
            try:
                if associations.get(keyworddict[keyword]).get(keyword):
                    pass
            except:
                print(keyworddict[keyword],keyword)

            if associations.get(keyworddict[keyword]).get(keyword):
                if word not in associations.get(keyworddict[keyword]).get(keyword):
                    associations[keyworddict[keyword]][keyword].append(word)

            else:
                associations[keyworddict[keyword]].update({keyword:[word]})

    return associations

def checkPDFs(pdfs,keyworddict,foundkeys):
    count = 0

    associations = {"threat_actors":{},"exploits":{},"malware":{},"SHA256":{},"SHA1":{},"MD5":{}}

    starttime = time.time()

    for pdf in pdfs:
        count += 1
        error = False
        
        try:
            with pdfplumber.open(pdf) as p:
                pass
            
        except:
            error = True
            print("Error opening PDF")
            
        if not error:
            with pdfplumber.open(pdf) as p:                
                for page in p.pages:                        
                    strippedpage = cleanpage(page.extract_text())
                    fullystrippedpage = strippedpage.replace("."," ")
                    
                    for word in fullystrippedpage.split(" "):
                        strippedword = cleanword(word)

                        isHash,hashType = checkHash(" " + strippedword.lower() + " ")
    
                        if keyworddict.get(strippedword):  
                            sentence = extractsentence(strippedpage,strippedpage.index(strippedword))
                            paragraph = extractparagraph(fullystrippedpage,fullystrippedpage.index(strippedword))

                            foundkeys[strippedword].append((os.path.basename(pdf),sentence))

                            associations = makeassociation(paragraph,keyworddict,strippedword,associations)

                        elif checkCVE(strippedword):
                            sentence = extractsentence(strippedpage,strippedpage.index(strippedword))
                            paragraph = extractparagraph(fullystrippedpage,fullystrippedpage.index(strippedword))

                            keyworddict.update({strippedword:"exploits"})
                            foundkeys.update({strippedword:[]})
                            
                            foundkeys[strippedword].append((os.path.basename(pdf),sentence))

                            associations = makeassociation(paragraph,keyworddict,strippedword,associations)

                        elif isHash:
                            sentence = extractsentence(strippedpage,strippedpage.index(strippedword))
                            paragraph = extractparagraph(fullystrippedpage,fullystrippedpage.index(strippedword))

                            keyworddict.update({strippedword:hashType})
                            foundkeys.update({strippedword:[]})
                            
                            foundkeys[strippedword].append((os.path.basename(pdf),sentence))

                            associations = makeassociation(paragraph,keyworddict,strippedword,associations)

        if count % 10 == 0:       
            endtime = time.time()
            print(count,endtime - starttime,pdf.split("\\")[-3])
            starttime = time.time()

    return keyworddict,foundkeys,associations


def main():
    pdfs = getPDFs("C:\\Users\\jayde\\APT_CyberCriminal_Campagin_Collections")
    keyworddict,foundkeys = getkeywords()

    keyworddict,foundkeys,associations = checkPDFs(pdfs,keyworddict,foundkeys)

    cves = ""
    SHA256hashes = ""
    SHA1hashes = ""
    MD5hashes = ""

    for keyword in list(keyworddict.keys()):
        if keyworddict[keyword] == "exploits":
            cves += keyword + "\n"

        elif keyworddict[keyword] == "SHA256":
            SHA256hashes += keyword + "\n"
        
        elif keyworddict[keyword] == "SHA1":
            SHA1hashes += keyword + "\n"
        
        elif keyworddict[keyword] == "MD5":
            MD5hashes += keyword + "\n"

    with open(".\\resources\\cveexamples.txt","w") as cvefile:
        cvefile.write(cves)
        cvefile.close()

    with open(".\\resources\\SHA256hashes.txt","w") as hashfile:
        hashfile.write(SHA256hashes)
        hashfile.close()
    
    with open(".\\resources\\SHA1hashes.txt","w") as hashfile:
        hashfile.write(SHA1hashes)
        hashfile.close()
    
    with open(".\\resources\\MD5hashes.txt","w") as hashfile:
        hashfile.write(MD5hashes)
        hashfile.close()

    with open(".\\resources\\FoundKeywords.json","w") as foundkeyfile:
        json.dump(foundkeys,foundkeyfile)
        foundkeyfile.close()

    with open(".\\resources\\Associations.json","w") as associationsfile:
        json.dump(associations,associationsfile)
        associationsfile.close()
    
if __name__ == "__main__":
    main()